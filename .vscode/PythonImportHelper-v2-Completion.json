[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "qbittorrentapi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qbittorrentapi",
        "description": "qbittorrentapi",
        "detail": "qbittorrentapi",
        "documentation": {}
    },
    {
        "label": "QbtConfig",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class QbtConfig:\n    \"\"\"Configuration class for qBittorrent cleanup settings.\"\"\"\n    def __init__(self):\n        # Connection settings\n        self.qb_host = os.environ.get(\"QB_HOST\", \"localhost\")\n        self.qb_port = int(os.environ.get(\"QB_PORT\", \"8080\"))\n        self.qb_username = os.environ.get(\"QB_USERNAME\", \"admin\")\n        self.qb_password = os.environ.get(\"QB_PASSWORD\", \"adminadmin\")\n        # Fallback cleanup settings\n        self.fallback_ratio = float(os.environ.get(\"FALLBACK_RATIO\", \"1.0\"))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "FileFlowsClient",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class FileFlowsClient:\n    \"\"\"Client for FileFlows API integration.\"\"\"\n    def __init__(self, config: QbtConfig):\n        self.config = config\n        self.base_url = f\"http://{config.fileflows_host}:{config.fileflows_port}/api\"\n        self.timeout = config.fileflows_timeout\n        self._processing_cache: Dict[str, bool] = {}\n    def is_enabled(self) -> bool:\n        \"\"\"Check if FileFlows integration is enabled.\"\"\"\n        return self.config.fileflows_enabled",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "QbtCleanup",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class QbtCleanup:\n    \"\"\"Main cleanup class for qBittorrent torrents.\"\"\"\n    def __init__(self, config: QbtConfig):\n        self.config = config\n        self.client: Optional[qbittorrentapi.Client] = None\n        self.fileflows: Optional[FileFlowsClient] = None\n        self._private_cache: Dict[str, bool] = {}\n        self._privacy_method_logged = False\n    def connect(self) -> bool:\n        \"\"\"Connect to qBittorrent client and optionally FileFlows.\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main():\n    \"\"\"Main entry point.\"\"\"\n    config = QbtConfig()\n    cleanup = QbtCleanup(config)\n    logger.info(\"qBittorrent Cleanup Container started\")\n    logger.info(f\"Schedule: {'Run once' if config.run_once else f'Every {config.interval_hours}h'}\")\n    if config.run_once:\n        success = cleanup.run_cleanup()\n        sys.exit(0 if success else 1)\n    else:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "SECONDS_PER_DAY",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "SECONDS_PER_DAY = 86400\nDEFAULT_TIMEOUT = 30\nMAX_SEARCH_ATTEMPTS = 3\n# ─── Logging setup ─────────────────────────────────────────────────────────\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n    handlers=[logging.StreamHandler(sys.stdout)],\n)\nlogger = logging.getLogger(\"qbt-cleanup\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TIMEOUT",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "DEFAULT_TIMEOUT = 30\nMAX_SEARCH_ATTEMPTS = 3\n# ─── Logging setup ─────────────────────────────────────────────────────────\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n    handlers=[logging.StreamHandler(sys.stdout)],\n)\nlogger = logging.getLogger(\"qbt-cleanup\")\nclass QbtConfig:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MAX_SEARCH_ATTEMPTS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "MAX_SEARCH_ATTEMPTS = 3\n# ─── Logging setup ─────────────────────────────────────────────────────────\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n    handlers=[logging.StreamHandler(sys.stdout)],\n)\nlogger = logging.getLogger(\"qbt-cleanup\")\nclass QbtConfig:\n    \"\"\"Configuration class for qBittorrent cleanup settings.\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(\"qbt-cleanup\")\nclass QbtConfig:\n    \"\"\"Configuration class for qBittorrent cleanup settings.\"\"\"\n    def __init__(self):\n        # Connection settings\n        self.qb_host = os.environ.get(\"QB_HOST\", \"localhost\")\n        self.qb_port = int(os.environ.get(\"QB_PORT\", \"8080\"))\n        self.qb_username = os.environ.get(\"QB_USERNAME\", \"admin\")\n        self.qb_password = os.environ.get(\"QB_PASSWORD\", \"adminadmin\")\n        # Fallback cleanup settings",
        "detail": "app",
        "documentation": {}
    }
]