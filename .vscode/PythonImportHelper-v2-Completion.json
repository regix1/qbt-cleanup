[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "qbittorrentapi",
        "description": "qbittorrentapi",
        "isExtraImport": true,
        "detail": "qbittorrentapi",
        "documentation": {}
    },
    {
        "label": "LoginFailed",
        "importPath": "qbittorrentapi",
        "description": "qbittorrentapi",
        "isExtraImport": true,
        "detail": "qbittorrentapi",
        "documentation": {}
    },
    {
        "label": "APIConnectionError",
        "importPath": "qbittorrentapi",
        "description": "qbittorrentapi",
        "isExtraImport": true,
        "detail": "qbittorrentapi",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "username = os.environ.get(\"QB_USERNAME\", \"\")\npassword = os.environ.get(\"QB_PASSWORD\", \"\")\nif not username or not password:\n    print(\"❌ Please set QB_USERNAME and QB_PASSWORD\")\n    sys.exit(1)\n# ─── connect ────────────────────────────────────────────────────────────────────\nclient = Client(\n    host=f\"{host}:{port}\",\n    username=username,\n    password=password,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "password = os.environ.get(\"QB_PASSWORD\", \"\")\nif not username or not password:\n    print(\"❌ Please set QB_USERNAME and QB_PASSWORD\")\n    sys.exit(1)\n# ─── connect ────────────────────────────────────────────────────────────────────\nclient = Client(\n    host=f\"{host}:{port}\",\n    username=username,\n    password=password,\n    VERIFY_WEBUI_CERTIFICATE=False,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "client = Client(\n    host=f\"{host}:{port}\",\n    username=username,\n    password=password,\n    VERIFY_WEBUI_CERTIFICATE=False,\n)\ntry:\n    client.auth_log_in()\nexcept (LoginFailed, APIConnectionError) as e:\n    print(\"❌ Failed to log in:\", e)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "private_torrents",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "private_torrents = client.torrents.info(private=True)[:3]\n# ─── print them ─────────────────────────────────────────────────────────────────\nprint(f\"First 3 public torrents  ({len(public_torrents)} shown):\")\nfor t in public_torrents:\n    print(f\" • {t.name}  [{t.hash}]\")\nprint(f\"\\nFirst 3 private torrents ({len(private_torrents)} shown):\")\nfor t in private_torrents:\n    print(f\" • {t.name}  [{t.hash}]\")\n# ─── clean up ───────────────────────────────────────────────────────────────────\nclient.auth_log_out()",
        "detail": "app",
        "documentation": {}
    }
]